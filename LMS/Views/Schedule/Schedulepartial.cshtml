@using LMS.Models
@model Schedule

<div class="schema">
	@{
		//Earliest start of a day in whole hours
		var startTimeOffset = Model.Lectures.Aggregate((l1, l2) => l1.Start.Hour < l2.Start.Hour ? l1 : l2).Start.Hour * 60;

		var overlapping = Model.GetOverlaps(2);
		var days = ((IEnumerable<_lecture>)Model.Lectures
			.Where(l => l.GetOverlapping(overlapping).Any() == false)	//TODO: shove info in overlapping
			).Concat(overlapping)
			.GroupBy(l => l.Start.Day)
			.OrderBy(g => g.Key);
		var dic = new Dictionary<Lecture, bool>();
	}
	@foreach (var day in days) {
		<div class="day">
			<h2>@day.First().Start.DayOfWeek</h2>

			@foreach (var _lecture in day) {
				double heightStretch = 1.2;
				int lectureStartMin = (int)((_lecture.Start.TimeOfDay.TotalMinutes - startTimeOffset) *heightStretch);
				int lectureTimeMin = (int)((_lecture.End - _lecture.Start).TotalMinutes * heightStretch);
				
				string widthStyling = "";	//place up to a few overlapping lectures next side by side
				if (_lecture is Lecture && ((Lecture)_lecture).GetOverlapping(Model).Any()) {
					var lec = (Lecture)_lecture;
					if (dic.ContainsKey(lec)) { widthStyling += " left: 65px;"; }
					else { foreach (Lecture l in lec.GetOverlapping(Model)) { if (!dic.ContainsKey(l)) { dic.Add(l, true); } } }
					widthStyling += " width: 50%";
				}

				<div class="lecture schema_blue" style="top: @(lectureStartMin)px; height: @(lectureTimeMin)px;@widthStyling">
					@_lecture.Start.ToString("HH:mm")<br/>
					@_lecture.Name
				</div>
			}
		</div>
	}
</div>
<div style="clear: both;" />
